on:
  push:
    branches:
      - devel
    paths-ignore:
      - 'examples/**'
      - 'Dockerfile'
      - 'dashboard/**'
      - 'code/**'
      - 'data/**'
  pull_request:
    branches:
      - devel
  schedule:
    # 每周一晚上11点跑任务
    - cron:  '0 23 * * 1'

name: Render-Book

env:
  isExtPR: ${{ github.event.pull_request.head.repo.fork == true }}

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
      matrix:
        config:
          - {os: ubuntu-20.04, r: '4.0.3'}

    env:
      RETICULATE_PYTHON_ENV: "/opt/.virtualenvs/r-tensorflow"
      LANG: "en_US.UTF-8"
      TZ: "Asia/Shanghai"
      CMDSTAN_VERSION: "2.26.0"
      CMDSTAN: "/opt/cmdstan/cmdstan-2.26.0"
      SPARK_HOME: "/opt/spark/spark-3.0.1-bin-hadoop2.7"

    steps:
      - name: Checkout repo
        uses: actions/checkout@main
        with:
          fetch-depth: 5
          ref: 'devel'

      - name: Setup R
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v1
        with:
          pandoc-version: '2.11.4'

      - name: Install ghostscript and Others
        run: |
          sudo apt-get install -y ghostscript cargo ffmpeg graphviz optipng jags virtualenv python3-virtualenv python3-tk libglpk-dev libgit2-dev
          sudo apt-get install -y libpoppler-cpp-dev libmagick++-dev libglu1-mesa-dev libnlopt-dev libudunits2-dev libgdal-dev libproj-dev
          sudo apt-get install -y libnode-dev libgmp-dev libmpfr-dev libmpc-dev tcl-dev tk-dev libxpm-dev libxaw7-dev libgraphviz-dev

      - name: Install TinyTeX
        uses: r-lib/actions/setup-tinytex@master
        env:
          # install full prebuilt version
          TINYTEX_INSTALLER: TinyTeX

      - name: Install Spark ENV
        run: |
          mkdir -p /opt/spark/
          curl -fLo spark-3.0.1-bin-hadoop2.7.tgz https://archive.apache.org/dist/spark/spark-3.0.1/spark-3.0.1-bin-hadoop2.7.tgz
          tar -xzf spark-3.0.1-bin-hadoop2.7.tgz -C /opt/spark/

      - name: Install Python ENV
        run: |
          virtualenv -p /usr/bin/python3 $RETICULATE_PYTHON_ENV
          source $RETICULATE_PYTHON_ENV/bin/activate
          python -V
          pip install -r requirements.txt
          pip list --format=columns
          deactivate

      - name: Build CmdStan
        run: |
          mkdir -p /opt/cmdstan
          curl -fLo cmdstan-${CMDSTAN_VERSION}.tar.gz https://github.com/stan-dev/cmdstan/releases/download/v${CMDSTAN_VERSION}/cmdstan-${CMDSTAN_VERSION}.tar.gz
          tar -xzf cmdstan-${CMDSTAN_VERSION}.tar.gz -C /opt/cmdstan/
          cd ${CMDSTAN}
          make build

      - name: Configure R CXXFLAGS/CXX14FLAGS
        run: |
          mkdir -p ~/.R
          echo "CXXFLAGS += -Wno-ignored-attributes" >> ~/.R/Makevars
          echo "CXX14 = g++ -flto=2" >> ~/.R/Makevars
          echo "CXX14FLAGS = -mtune=native -march=native -Wno-unused-variable -Wno-unused-function -Wno-unused-local-typedefs -Wno-ignored-attributes -Wno-deprecated-declarations -Wno-attributes -O3" >> ~/.R/Makevars
          echo $PATH

      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: r-${{ hashFiles('DESCRIPTION') }}
          restore-keys: r-

      - name: Cache bookdown results
        uses: actions/cache@v2
        with:
          path: _bookdown_files
          key: bookdown-2-${{ hashFiles('**/*Rmd') }}
          restore-keys: bookdown-2

      - name: Install LaTeX packages
        run: |
          R -e "if(!require('tinytex')) install.packages('tinytex')"
          R -e 'tinytex::tlmgr_install(readLines("texlive.txt"))'

      - name: Install R packages
        run: |
          R -e "if(!require('remotes')) install.packages(c('remotes'))"
          xvfb-run --auto-servernum R -e "update.packages(ask = F, checkBuilt = T, lib.loc = .libPaths()[1])"
          xvfb-run --auto-servernum R -e "remotes::install_deps(dependencies = TRUE)"
          R -e "if(!require('spDataLarge')) install.packages('spDataLarge', repos = 'https://nowosad.github.io/drat')"
          R -e "if(!require('Rgraphviz')) BiocManager::install('Rgraphviz')"
          R -e "if(!require('cmdstanr')) install.packages('cmdstanr', repos = c('https://mc-stan.org/r-packages/', getOption('repos')))"
          xvfb-run --auto-servernum R -e "if(!require('INLA')) install.packages('INLA', repos = c('https://inla.r-inla-download.org/R/stable', getOption('repos')), dependencies = T)"
          R -e "if(!require('catboost')) remotes::install_github('catboost/catboost', subdir = 'catboost/R-package')"

      - name: Check R packages
        run: |
          R -e 'sessionInfo(sort(.packages(T)))'

      - name: Install Fonts
        run: |
          sudo apt-get install -y fonts-urw-base35 fonts-dejavu fonts-liberation fonts-noto-color-emoji
          fc-list | grep 'dejavu' | sort
          fc-list | grep 'liberation' | sort
          fc-list | sort
          mkdir -p ~/.fonts/fira
          curl -fLo Adobe-Fonts.zip https://github.com/XiangyunHuang/fonts/releases/download/v0.1/Adobe-Fonts.zip
          unzip Adobe-Fonts.zip -d ~/.fonts/adobe
          curl -fLo ~/.fonts/xkcd.ttf http://simonsoftware.se/other/xkcd.ttf
          cp -r ~/.TinyTeX/texmf-dist/fonts/opentype/public/fira  ~/.fonts/
          fc-cache -fsv
          R -e 'library(showtext);font_install(source_han_serif(), quiet = TRUE);font_install(source_han_sans(), quiet = TRUE);hrbrthemes::import_roboto_condensed();font_add_google("Roboto Condensed", "Roboto Condensed")'
          # XKCD
          R -e 'library(extrafont);font_import(pattern="[X/x]kcd.ttf", prompt = FALSE)'

      - name: Build Book
        run: |
          if make gitbook; then make pdf; fi
        env:
          MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}

      - name: Upload book folder for debug
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: Upload Book
          path: _book

      - name: Deploy to Netlify
        if: contains(env.isExtPR, 'false')
        id: netlify-deploy
        uses: nwtgck/actions-netlify@v1.1
        with:
          publish-dir: './_book'
          production-branch: devel
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message:
            'Deploy from GHA: ${{ github.event.pull_request.title || github.event.head_commit.message }} (${{ github.sha }})'
          enable-pull-request-comment: true
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10
